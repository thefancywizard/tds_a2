{% import '/lib/di.twig' as di %}
<?php

namespace Drupal\{{ machine_name }}\Plugin\ExtraField\Display;

{% if services %}
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
{{ di.use(services) }}{% endif %}
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\extra_field\Plugin\ExtraFieldDisplayBase;

/**
 * Extra field plugin {{ plugin_label }}.
 *
 * @ExtraFieldDisplay(
 *   id = "{{ plugin_id }}",
 *   label = @Translation("{{ plugin_label }}"),
 *   bundles = {
 *     "node.*",
 *   }
 * )
 */
class {{ class }} extends ExtraFieldDisplayBase{% if services %} implements ContainerFactoryPluginInterface{% endif %} {

  {% if services %}
{{ di.properties(services) }}

  /**
   * Constructs a {{ plugin_label }} object.
   *
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin_id for the plugin instance.
   * @param mixed $plugin_definition
   *   The plugin implementation definition.
{{ di.annotation(services) }}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, {{ di.signature(services) }}) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
{{ di.assignment(services) }}
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration, $plugin_id, $plugin_definition,
{{ di.container(services) }}
    );
  }

{% endif %}
  /**
   * {@inheritdoc}
   */
  public function view(ContentEntityInterface $entity) {
    $build = ['#markup' => 'Hello world!'];
    return $build;
  }

}
